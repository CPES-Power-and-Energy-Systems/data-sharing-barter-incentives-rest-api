"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

import os
import structlog

from pathlib import Path
from datetime import timedelta

ENVIRONMENT = os.environ['DJANGO_APPLICATION_ENVIRONMENT']

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', os.urandom(24))
DEBUG = True
ACCOUNT_VERIFICATION = True

# HOSTS:
# todo
# Additionally, you can also use a reverse proxy server, such as NGINX or Apache, to limit access to your Django API
# and add extra security features, such as SSL encryption. In this case, you would specify the IP addresses or domain
# names of the reverse proxy servers in the ALLOWED_HOSTS setting.
ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'stronghold',
    'drf_yasg',
    'market',
    'users',
    'data'
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django_structlog.middlewares.RequestMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get("POSTGRES_NAME", 'valorem'),
        'USER': os.environ.get("POSTGRES_USER", 'valorem'),
        'PASSWORD': os.environ.get("POSTGRES_PASSWORD", 'valorem'),
        'HOST': os.environ.get("POSTGRES_HOST", 'localhost'),
        'PORT': os.environ.get("POSTGRES_PORT", 5432),
        # todo implement SSL connection to the Database
        # 'OPTIONS': {
        #     'sslmode': 'require',
        #     'sslrootcert': '/path/to/rootcert.pem',
        #     'sslcert': '/path/to/clientcert.pem',
        #     'sslkey': '/path/to/clientkey.pem',
        # },
        'TEST': {
            'NAME': 'test_database',
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/staticfiles/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=15),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'EXCEPTION_HANDLER': 'api.utils.exceptions.custom_exception_handler.custom_exception_handler',
}

CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 3600
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Swagger:
SWAGGER_BASE_URL = os.environ.get("SWAGGER_BASE_URL", None)
SWAGGER_SETTINGS = {
    "DEFAULT_MODEL_RENDERING": "example",
    "DOC_EXPANSION": "all",
    "HIDE_HOSTNAME": True,
    "DEFAULT_FILTER_INSPECTORS": [
        'drf_yasg.inspectors.CoreAPICompatInspector'
    ],
    "FILTER": False,
    "SHOW_EXTENSIONS": False,
    "LOGOUT_URL": "account/logout",
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

# Python logging ( using structlog )
# todo: email to admins logs for django.server & django.security
# see more in https://docs.djangoproject.com/en/4.0/ref/logging/#django-logger
LOG_DIR = (Path(BASE_DIR).parents[0]).joinpath("logs")
os.makedirs(LOG_DIR, exist_ok=True)

# log handlers definition:
MAIN_LOG_HANDLERS = []
DB_LOG_HANDLERS = []

# python manage.py runserver starts a python process that launches your server
# a child python process. Each time the parent detects a change it recreates
# a new child locking access to logfile
# see: https://stackoverflow.com/questions/26682413/django-rotating-file-handler-stuck-when-file-is-equal-to-maxbytes
if DEBUG and os.environ.get('RUN_MAIN', None) != 'true':
    LOGGING = {}
else:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "plain_console": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.dev.ConsoleRenderer(),
            },
            "json_formatter": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.processors.JSONRenderer(sort_keys=True),
            },
            'plain_text': {
                'format': '{asctime} | {levelname} | {module} | {process:d} | {thread:d} | {message}',
                'style': '{',
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "plain_console",
            },
            "json_file": {
                'level': 'DEBUG',
                'class': 'api.utils.logging.handlers.TimedCompressedRotatingFileHandler',
                'filename': os.path.join(LOG_DIR, "requests_json.log"),
                'when': 'D',
                'interval': 1,
                'backupCount': 1,
                "formatter": "json_formatter",
            },
            'text_file': {
                'level': 'DEBUG',
                'class': 'api.utils.logging.handlers.TimedCompressedRotatingFileHandler',
                'filename': os.path.join(LOG_DIR, "requests_text.log"),
                'when': 'D',
                'interval': 1,
                'backupCount': 1,
                'formatter': "plain_text"
            },
            'text_exception': {
                'level': 'DEBUG',
                'class': 'api.utils.logging.handlers.TimedCompressedRotatingFileHandler',
                'filename': os.path.join(LOG_DIR, "requests_exception_text.log"),
                'when': 'D',
                'interval': 1,
                'backupCount': 1,
                'formatter': "plain_text"
            },
        },
        "loggers": {
            "django_structlog": {
                "handlers": MAIN_LOG_HANDLERS,
                "level": "DEBUG",
            },
            "api_logger": {
                "handlers": MAIN_LOG_HANDLERS,
                "level": "DEBUG",
            },
            "api_error500_logger": {
                "handlers": ["console", "text_exception"],
                "level": "DEBUG",
            },
            'django.db.backends': {
                'handlers': DB_LOG_HANDLERS,
                'level': 'DEBUG',
                'propagate': True,
            },
        }
    }

structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    context_class=structlog.threadlocal.wrap_dict(dict),
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)


# Extra Configs:
# -- IOTA Configs:
MINIMUM_PAYMENT_AMOUNT = int(os.environ.get("MINIMUM_PAYMENT_AMOUNT", 1000000))

# -- Email Configs:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get("EMAIL_HOST", )
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", '')
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", '')
EMAIL_USE_TLS = True if int(os.environ.get("EMAIL_USE_TLS", 0)) == 1 else False
EMAIL_USE_SSL = True if int(os.environ.get("EMAIL_USE_SSL", 0)) == 1 else False
EMAIL_TIMEOUT = int(os.environ.get("EMAIL_TIMEOUT", 30))

# -- REST configs:
REST_PORT = int(os.environ.get("REST_PORT", 8080))
